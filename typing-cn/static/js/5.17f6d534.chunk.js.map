{"version":3,"sources":["utils/wordTool.ts","components/typeResult/TypeResult.tsx","components/reloadBtn/ReloadBtn.tsx","../node_modules/@ant-design/icons-svg/es/asn/ReloadOutlined.js","../node_modules/@ant-design/icons/es/icons/ReloadOutlined.js","views/monkey/Monkey.tsx"],"names":["wordTool","shuffle","arr","i","length","rIndex","Math","floor","random","temp","getWords","mode","propWords","jsonCopy","WORDS","obj","JSON","parse","stringify","TypeResult","props","className","justify","gutter","span","desc","numStr","acc","secs","ReloadBtn","onClick","type","icon","ReloadOutlined","ref","React","AntdIcon","Object","assign","ReloadOutlinedSvg","displayName","getCurrentWordEl","mEl","Array","from","children","storeConnect","inputEl","useRef","mainEl","caretElRef","wordsBaseRef","$state","root","wordsMode","customerWords","coordinateRef","typeResultRef","wpm","right","wrong","time","begin","useState","isTyping","setIsTyping","isCaretFlash","setIsCaretFlash","isFadingTypeMain","setIsFadingTypeMain","showTypeResult","setShowTypeResult","userInput","setUserInput","wordArr","setWordArr","top","left","caretLocation","setCaretLocation","wordCount","setWordCount","setCaret","coordinate","current","mainElRect","getBoundingClientRect","currentWordEl","currentLetterArr","getElementsByClassName","letterRect","width","inputForwardFunc","useCallback","keyCode","inputVal","newCoordinate","isNewWordInputing","charAt","letterArr","codeEl","document","createElement","innerText","appendChild","_wordArr","letterObj","isCorrect","letter","some","l","isSkip","extraLetterArr","every","filter","w","round","Date","now","toFixed","setTimeout","v","backspaceFunc","deleteChar","lIndex","findIndex","removeChild","canDelete","substring","focusToInput","focus","reloadWord","forEach","etl","parentNode","slice","map","word","text","useEffect","Group","value","size","onChange","e","target","Button","tabIndex","align","flex","style","transform","wi","key","label","li","onKeyDown","evt","preventDefault","stopPropagation","persist","onBlur","onFocus"],"mappings":"8GAAA,aAEMA,EAAW,CACbC,QADa,SACLC,GACJ,IAAK,IAAIC,EAAID,EAAIE,OAAS,EAAGD,GAAK,EAAGA,IAAK,CACtC,IAAIE,EAASC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IACzCM,EAAOP,EAAIG,GACfH,EAAIG,GAAUH,EAAIC,GAClBD,EAAIC,GAAKM,EAEb,OAAOP,GAEXQ,SAVa,SAUJC,EAAcC,GACnB,MAAa,MAATD,GAAgBC,GAAkC,IAArBA,EAAUR,OAChCJ,EAASa,SAAiBD,GAE1BZ,EAASa,SAAiBC,MAGzCD,SAjBa,SAiBDE,GACR,OAAOC,KAAKC,MAAMD,KAAKE,UAAUH,MAK1Bf,O,iCCzBf,6CAuCemB,IArBqB,SAACC,GACjC,OACI,yBAAKC,UAAU,cACX,kBAAC,IAAD,CAAKC,QAAQ,SAASC,OAAQ,IAC1B,kBAAC,IAAD,CAAKC,KAAM,GACP,yBAAKH,UAAU,SAASD,EAAMK,MAC9B,yBAAKJ,UAAU,aAAaD,EAAMM,SAEtC,kBAAC,IAAD,CAAKF,KAAM,GACP,yBAAKH,UAAU,SAAf,sBACA,yBAAKA,UAAU,aAAaD,EAAMO,IAAlC,MAEJ,kBAAC,IAAD,CAAKH,KAAM,GACP,yBAAKH,UAAU,SAAf,gBACA,yBAAKA,UAAU,aAAaD,EAAMQ,KAAlC,U,uDChCpB,4CA2BeC,IAXoB,SAACT,GAChC,OACI,kBAAC,IAAD,CACIC,UAAU,YACVS,QAASV,EAAMU,QACfC,KAAK,UACLC,KAAM,kBAAC,IAAD,U,kECnBHC,EADM,CAAE,KAAQ,SAAU,MAAS,WAAY,KAAQ,CAAE,IAAO,MAAO,MAAS,CAAE,QAAW,gBAAiB,UAAa,SAAW,SAAY,CAAC,CAAE,IAAO,OAAQ,MAAS,CAAE,EAAK,wrB,QCI/LA,EAAiB,SAAwBb,EAAOc,GAClD,OAAOC,gBAAoBC,IAAUC,OAAOC,OAAO,GAAIlB,EAAO,CAC5Dc,IAAKA,EACLF,KAAMO,MAIVN,EAAeO,YAAc,iBACdL,iBAAiBF,I,iKCS1BQ,EAAmB,SAACC,GAAD,OAAcC,MAAMC,KAAUF,EAAIG,WAyX5CC,uBAvXkC,SAAC1B,GAC9C,IAAM2B,EAAUC,iBAAO,MACjBC,EAASD,iBAAO,MAChBE,EAAaF,iBAAO,MACpBG,EAAeH,iBACjBhD,IAASU,SAASU,EAAMgC,OAAOC,KAAKC,UAAWlC,EAAMgC,OAAOC,KAAKE,gBAE/DC,EAAgBR,iBAAO,CAAC,EAAG,IAC3BS,EAAgBT,iBAAO,CACzBU,IAAK,GACLC,MAAO,EACPC,MAAO,EACPjC,IAAK,EACLkC,KAAM,CAAEC,MAAO,EAAGlC,KAAM,KAb4B,EAgBxBmC,oBAAS,GAhBe,mBAgBjDC,EAhBiD,KAgBvCC,EAhBuC,OAiBhBF,oBAAS,GAjBO,mBAiBjDG,EAjBiD,KAiBnCC,EAjBmC,OAkBRJ,oBAAS,GAlBD,mBAkBjDK,EAlBiD,KAkB/BC,EAlB+B,OAmBZN,oBAAS,GAnBG,mBAmBjDO,EAnBiD,KAmBjCC,EAnBiC,OAoBtBR,mBAAS,IApBa,mBAoBjDS,EApBiD,KAoBtCC,EApBsC,OAqB1BV,mBAAyB,IArBC,mBAqBjDW,EArBiD,KAqBxCC,EArBwC,OAsBdZ,mBAAS,CAAEa,IAAK,EAAGC,KAAM,IAtBX,mBAsBjDC,EAtBiD,KAsBlCC,EAtBkC,OAuBtBhB,mBAAS,IAvBa,mBAuBjDiB,EAvBiD,KAuBtCC,EAvBsC,KAyBlDC,EAAW,WACb,IAAMC,EAAa3B,EAAc4B,QAC3BC,EAAcpC,EAAOmC,QAAgBE,wBACrCC,EAAgB9C,EAAiBQ,EAAOmC,SAASD,EAAW,IAClE,GAAKI,EAAL,CACA,IAAMC,EAAmB7C,MAAMC,KAAU2C,EAAcE,uBAAuB,WAC9E,GAAID,EAAiBpF,QAAU+E,EAAW,GAAI,CAC1C,IAAMO,EAAaF,EAAiBL,EAAW,GAAK,GAAGG,wBACvDP,EAAiB,CACbH,IAAKc,EAAWd,IAAMS,EAAWT,IAAM,EACvCC,KAAMa,EAAWb,KAAOQ,EAAWR,KAAOa,EAAWC,YAEtD,CACH,IAAMD,EAAaF,EAAiBL,EAAW,IAAIG,wBACnDP,EAAiB,CACbH,IAAKc,EAAWd,IAAMS,EAAWT,IAAM,EACvCC,KAAMa,EAAWb,KAAOQ,EAAWR,UAKzCe,EAAmBC,uBACrB,SAACC,EAAiBC,GACd,IAGIC,EAHEb,EAAa3B,EAAc4B,QAC3Ba,EACY,KAAdzB,GAA+D,MAA3CA,EAAU0B,OAAO1B,EAAUpE,OAAS,GAE5D,GAzDO,KAyDH0F,EAEIE,EADAC,EACgBd,EAEA,CAACA,EAAW,GAAK,EAAG,OAErC,CACH,GAAIA,EAAW,IAAMT,EAAQS,EAAW,IAAIgB,UAAU/F,OAAQ,CAE1D,IAAMmF,EAAgB9C,EAAiBQ,EAAOmC,SAASD,EAAW,IAC5DiB,EAASC,SAASC,cAAc,QACtCF,EAAO/E,UAAY,4BACnB+E,EAAOG,UAAYR,EACnBR,EAAciB,YAAYJ,GAE9BJ,EAAgB,CAACb,EAAW,GAAIA,EAAW,GAAK,GAEpD3B,EAAc4B,QAAUY,EACxBd,IAEAP,GAAW,SAAC8B,GACR,IAAMC,EAAYD,EAAStB,EAAW,IAAIgB,UAAUhB,EAAW,IAM/D,GALIuB,GA/ED,KA+EcZ,IAEbY,EAAUC,UAAYZ,IAAaW,EAAUE,OAC7CH,EAAStB,EAAW,IAAIgB,UAAUhB,EAAW,IAAMuB,GAlFpD,KAoFCZ,IAA2BG,EAE3B,GAAIQ,EAAStB,EAAW,IAAIgB,UAAUU,MAAK,SAACC,GAAD,OAAuB,OAAhBA,EAAEH,aAChDF,EAAStB,EAAW,IAAI4B,QAAS,EACjCN,EAAStB,EAAW,IAAIwB,WAAY,MACjC,CACH,IACMK,EADgBvE,EAAiBQ,EAAOmC,SAASD,EAAW,IAC7BM,uBAAuB,gBACvDuB,GAA4C,IAA1BA,EAAe5G,OAKlCqG,EAAStB,EAAW,IAAIwB,WAAY,EAJpCF,EAAStB,EAAW,IAAIwB,UAAYF,EAChCtB,EAAW,IACbgB,UAAUc,OAAM,SAACH,GAAD,OAAOA,EAAEH,aAoCvC,OA3BIX,EAAc,GAAKS,EAASrG,OAAS,GACpC+E,EAAW,KAAOsB,EAASrG,OAAS,GACjC+E,EAAW,KAAOsB,EAAStB,EAAW,IAAIgB,UAAU/F,OAAS,KAEjEqG,EAAStB,EAAW,IAAIwB,UAAYF,EAAStB,EAAW,IAAIgB,UAAUc,OAClE,SAACH,GAAD,OAAOA,EAAEH,aAEblD,EAAc2B,QAAQzB,MAAQ8C,EAASS,QAAO,SAACC,GAAD,OAAOA,EAAER,aAAWvG,OAClEqD,EAAc2B,QAAQxB,MAAQ6C,EAASrG,OAASqD,EAAc2B,QAAQzB,MACtEF,EAAc2B,QAAQzD,IAAMrB,KAAK8G,MAC5B3D,EAAc2B,QAAQzB,OAClBF,EAAc2B,QAAQzB,MAAQF,EAAc2B,QAAQxB,OACrD,KAERH,EAAc2B,QAAQvB,KAAKjC,KAAOtB,KAAK8G,OAClCC,KAAKC,MAAQ7D,EAAc2B,QAAQvB,KAAKC,OAAS,KAEtDL,EAAc2B,QAAQ1B,KAClBD,EAAc2B,QAAQzB,OACrBF,EAAc2B,QAAQvB,KAAKjC,KAAO,KACrC2F,QAAQ,GACVtD,GAAY,GACZI,GAAoB,GACpBmD,YAAW,WACPjD,GAAkB,KACnB,MAEAkC,KAEXhC,GAAa,SAACgD,GACV,OAtIG,KAsIC3B,GAAiC,KAAN2B,GAAuC,MAA3BA,EAAEvB,OAAOuB,EAAErH,OAAS,GAGxDqH,EAAI1B,EAFA0B,OAKnB,CAACjD,EAAWE,IAEVgD,EAAgB7B,uBAAY,WAC9B,IAAM8B,EAAanD,EAAU0B,OAAO1B,EAAUpE,OAAS,GACvD,GAAmB,KAAfuH,EAAJ,CAGA,IACI3B,EADEb,EAAa3B,EAAc4B,QAEjC,GAAmB,MAAfuC,EACA,GAAIjD,EAAQS,EAAW,GAAK,GAAGwB,UAC3BX,EAAgBb,OAEhB,GAAIT,EAAQS,EAAW,GAAK,GAAG4B,OAAQ,CACnC,IAAMa,EAASlD,EAAQS,EAAW,GAAK,GAAGgB,UAAU0B,WAChD,SAACf,GAAD,OAAuB,OAAhBA,EAAEH,aAEbX,EAAgB,CAACb,EAAW,GAAK,EAAGyC,OACjC,CACH,IACMpC,EADgB/C,EAAiBQ,EAAOmC,SAASD,EAAW,GAAK,GAChCM,uBAAuB,UAC9DO,EAAgB,CAACb,EAAW,GAAK,EAAGK,EAAiBpF,YAG1D,CACH,IAAMmF,EAAgB9C,EAAiBQ,EAAOmC,SAASD,EAAW,IAC5D6B,EAAiBzB,EAAcE,uBAAuB,gBACxDuB,GAAkBA,EAAe5G,OAAS,GAC1CmF,EAAcuC,YAAYd,EAAeA,EAAe5G,OAAS,IAErE4F,EAAgB,CAACb,EAAW,GAAIA,EAAW,GAAK,GAEpD3B,EAAc4B,QAAUY,EACxBd,IACAP,GAAW,SAAC8B,GASR,MARmB,MAAfkB,GAC8C,IAA1ClB,EAAStB,EAAW,GAAK,GAAGwB,YAC5BF,EAAStB,EAAW,GAAK,GAAGwB,UAAY,MAErCF,EAAStB,EAAW,IAAIgB,UAAU/F,QAAU+E,EAAW,KAC9DsB,EAAStB,EAAW,IAAIgB,UAAUhB,EAAW,GAAK,GAAGwB,UAAY,KACjEF,EAAStB,EAAW,IAAIwB,UAAY,MAEjCF,KAEXhC,GAAa,SAACgD,GACV,IAAIM,GAAY,EAMhB,MALmB,MAAfJ,GACIjD,EAAQS,EAAW,GAAK,GAAGwB,YAC3BoB,GAAY,GAGbA,EAAYN,EAAEO,UAAU,EAAGP,EAAErH,OAAS,GAAKqH,QAEvD,CAACjD,EAAWE,IAwBTuD,EAAe,WACjBhE,GAAY,GACXlB,EAAQqC,QAAgB8C,SAGvBC,EAAatC,uBAAY,WAC3BrC,EAAc4B,QAAU,CAAC,EAAG,GAC5BjC,EAAaiC,QAAUpF,IAASC,QAAQkD,EAAaiC,SACrD3B,EAAc2B,QAAU,CACpB1B,IAAK,GACLC,MAAO,EACPC,MAAO,EACPjC,IAAK,EACLkC,KAAM,CAAEC,MAAO,EAAGlC,KAAM,IAE5B,IAAMoF,EAAkB/D,EAAOmC,QAAgBK,uBAAuB,gBACxC,IAA1BuB,EAAe5G,QACfuC,MAAMC,KAAUoE,GAAgBoB,SAAQ,SAACC,GACrCA,EAAIC,WAAWR,YAAYO,MAGnC1D,EACI3E,IAASa,SAAqBsC,EAAaiC,QAAQmD,MAAM,EAAGvD,IAAYwD,KAAI,SAACC,GACzE,OAAOpG,OAAOC,OAAO,GAAImG,EAAM,CAC3BtC,UAAWxD,MAAMC,KAAK6F,EAAKC,MAAMF,KAAI,SAAC5B,GAAD,MAAa,CAC9CA,SACAD,UAAW,SAEfA,UAAW,KACXI,QAAQ,QAIpBtC,EAAa,IACbJ,GAAoB,GACpBE,GAAkB,GAClBiD,YAAW,WACPS,IACA/C,MACD,MACJ,CAACF,IAUJ,OARA2D,qBAAU,WACNxF,EAAaiC,QAAUpF,IAASU,SAC5BU,EAAMgC,OAAOC,KAAKC,UAClBlC,EAAMgC,OAAOC,KAAKE,eAEtB4E,MACD,CAAC/G,EAAMgC,OAAOC,KAAKC,UAAWlC,EAAMgC,OAAOC,KAAKE,cAAe4E,EAAYnD,IAG1E,yBAAK3D,UAAU,UACX,yBAAKA,UAAU,oBACX,kBAAC,IAAMuH,MAAP,CACIC,MAAO7D,EACP8D,KAAK,QACLC,SAAU,SAACC,GACP/D,EAAa+D,EAAEC,OAAOJ,SAG1B,kBAAC,IAAMK,OAAP,CAAcC,UAAW,EAAGN,MAAO,IAAnC,MAGA,kBAAC,IAAMK,OAAP,CAAcC,UAAW,EAAGN,MAAO,IAAnC,MAGA,kBAAC,IAAMK,OAAP,CAAcC,UAAW,EAAGN,MAAO,IAAnC,MAGA,kBAAC,IAAMK,OAAP,CAAcC,UAAW,EAAGN,MAAO,IAAnC,QAKR,kBAAC,IAAD,CAAKvH,QAAQ,SAAS8H,MAAM,UACxB,kBAAC,IAAD,CACIC,KAAK,QACLhI,UAAS,wBAAmB+C,EAAmB,SAAW,GAAjD,YACLE,EAAiB,OAAS,KAG9B,yBACIjD,UAAS,gBAAW2C,EAAYE,EAAe,QAAU,GAAM,QAC/DhC,IAAKgB,EACLoG,MAAO,CACHC,UAAU,eAAD,OAAiBzE,EAAcD,KAA/B,cAAyCC,EAAcF,IAAvD,YAGjB,yBAAKvD,UAAU,YAAYS,QAASmG,EAAc/F,IAAKe,GAClDyB,EAAQ8D,KAAI,SAACC,EAAMe,GAAP,aACT,yBACInI,UAAS,eACLoH,EAAK9B,UACC,WACmB,IAAnB8B,EAAK9B,UACL,QACA,IAEV8C,IAAKD,GAEL,yBAAKnI,UAAU,SAASoH,EAAKiB,OAVjC,UAWKjB,EAAKtC,iBAXV,aAWK,EAAgBqC,KAAI,SAAC9B,EAAWiD,GAAZ,OACjB,0BACItI,UAAS,iBACLqF,EAAUC,UACJ,WACwB,IAAxBD,EAAUC,UACV,QACA,IAEV8C,IAAG,UAAKD,EAAL,YAAWG,IAEbjD,EAAUE,gBAM/B,2BACIvF,UAAU,eACVU,KAAK,OACLG,IAAKa,EACL6G,UAhJC,SAACC,GAGE,IAAhBA,EAAI/D,UACJ+D,EAAIC,iBACJD,EAAIE,kBACJF,EAAIG,WAEJ1F,IAGJH,GAAgB,GACO,IAAnB0F,EAAIJ,IAAIrJ,QACiC,IAArCqD,EAAc2B,QAAQvB,KAAKC,QAC3BL,EAAc2B,QAAQvB,KAAKC,MAAQuD,KAAKC,OAE5C1B,EAAiBiE,EAAI/D,QAAS+D,EAAIJ,MAnNvB,IAoNJI,EAAI/D,SACX4B,MA+HYuC,OAAQ,WACJhG,GAAY,IAGhBiG,QAAS,WACLjG,GAAY,GACZE,GAAgB,MAGxB,yBAAK9C,UAAU,eACX,kBAAC,IAAD,CAAWS,QAASqG,KAGxB,yBAAK9G,UAAS,mBAAe6C,EAAwB,GAAT,SACxC,6FACA,qHACA,8DACS,qCADT,4DAMR,kBAAC,IAAD,CAAKmF,KAAK,QAAQhI,UAAS,0BAAqBiD,EAAiB,OAAS,KAEtE,kBAAC,IAAD,CACI7C,KAAK,MACLC,OAAQ+B,EAAc2B,QAAQ1B,IAC9B/B,IAAK8B,EAAc2B,QAAQzD,IAC3BC,KAAM6B,EAAc2B,QAAQvB,KAAKjC,OAErC,yBAAKP,UAAU,eACX,kBAAC,IAAD,CAAWS,QAASqG","file":"static/js/5.17f6d534.chunk.js","sourcesContent":["import WORDS, { Word } from '@/words';\r\n\r\nconst wordTool = {\r\n    shuffle(arr: any[]) {\r\n        for (let i = arr.length - 1; i >= 0; i--) {\r\n            let rIndex = Math.floor(Math.random() * (i + 1));\r\n            let temp = arr[rIndex];\r\n            arr[rIndex] = arr[i];\r\n            arr[i] = temp;\r\n        }\r\n        return arr;\r\n    },\r\n    getWords(mode: string, propWords: Word[]) {\r\n        if (mode !== '1' && propWords && propWords.length !== 0) {\r\n            return wordTool.jsonCopy<Word[]>(propWords);\r\n        } else {\r\n            return wordTool.jsonCopy<Word[]>(WORDS);\r\n        }\r\n    },\r\n    jsonCopy<T>(obj: object) {\r\n        return JSON.parse(JSON.stringify(obj)) as T;\r\n    },\r\n};\r\n\r\nexport type WordType = Word;\r\nexport default wordTool;\r\n","/*\r\n * @Author: zhaoxuanzi\r\n * @Date: 2021-02-07 17:56:59\r\n * @LastEditors: zhaoxuanzi\r\n * @LastEditTime: 2021-02-08 11:29:26\r\n */\r\nimport React from 'react';\r\nimport { Row, Col } from 'antd';\r\n\r\nimport './TypeResult.less';\r\n\r\ninterface Props {\r\n    desc: string;\r\n    numStr: string;\r\n    acc: number;\r\n    secs: number;\r\n}\r\n\r\nconst TypeResult: React.FC<Props> = (props) => {\r\n    return (\r\n        <div className=\"TypeResult\">\r\n            <Row justify=\"center\" gutter={80}>\r\n                <Col span={6}>\r\n                    <div className=\"label\">{props.desc}</div>\r\n                    <div className=\"show-data\">{props.numStr}</div>\r\n                </Col>\r\n                <Col span={6}>\r\n                    <div className=\"label\">正确率</div>\r\n                    <div className=\"show-data\">{props.acc}%</div>\r\n                </Col>\r\n                <Col span={6}>\r\n                    <div className=\"label\">用时</div>\r\n                    <div className=\"show-data\">{props.secs}s</div>\r\n                </Col>\r\n            </Row>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TypeResult;\r\n","/*\r\n * @Author: zhaoxuanzi\r\n * @Date: 2021-02-07 18:40:35\r\n * @LastEditors: zhaoxuanzi\r\n * @LastEditTime: 2021-02-07 18:43:52\r\n */\r\nimport React from 'react';\r\nimport { Button } from 'antd';\r\nimport { ReloadOutlined } from '@ant-design/icons';\r\n\r\nimport './ReloadBtn.less';\r\n\r\ninterface Props {\r\n    onClick: () => void;\r\n}\r\n\r\nconst ReloadBtn: React.FC<Props> = (props) => {\r\n    return (\r\n        <Button\r\n            className=\"ReloadBtn\"\r\n            onClick={props.onClick}\r\n            type=\"primary\"\r\n            icon={<ReloadOutlined />}\r\n        />\r\n    );\r\n};\r\n\r\nexport default ReloadBtn;\r\n","// This icon file is generated automatically.\n// tslint:disable\nvar ReloadOutlined = { \"name\": \"reload\", \"theme\": \"outlined\", \"icon\": { \"tag\": \"svg\", \"attrs\": { \"viewBox\": \"64 64 896 896\", \"focusable\": \"false\" }, \"children\": [{ \"tag\": \"path\", \"attrs\": { \"d\": \"M909.1 209.3l-56.4 44.1C775.8 155.1 656.2 92 521.9 92 290 92 102.3 279.5 102 511.5 101.7 743.7 289.8 932 521.9 932c181.3 0 335.8-115 394.6-276.1 1.5-4.2-.7-8.9-4.9-10.3l-56.7-19.5a8 8 0 00-10.1 4.8c-1.8 5-3.8 10-5.9 14.9-17.3 41-42.1 77.8-73.7 109.4A344.77 344.77 0 01655.9 829c-42.3 17.9-87.4 27-133.8 27-46.5 0-91.5-9.1-133.8-27A341.5 341.5 0 01279 755.2a342.16 342.16 0 01-73.7-109.4c-17.9-42.4-27-87.4-27-133.9s9.1-91.5 27-133.9c17.3-41 42.1-77.8 73.7-109.4 31.6-31.6 68.4-56.4 109.3-73.8 42.3-17.9 87.4-27 133.8-27 46.5 0 91.5 9.1 133.8 27a341.5 341.5 0 01109.3 73.8c9.9 9.9 19.2 20.4 27.8 31.4l-60.2 47a8 8 0 003 14.1l175.6 43c5 1.2 9.9-2.6 9.9-7.7l.8-180.9c-.1-6.6-7.8-10.3-13-6.2z\" } }] } };\nexport default ReloadOutlined;\n","// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\nimport * as React from 'react';\nimport ReloadOutlinedSvg from \"@ant-design/icons-svg/es/asn/ReloadOutlined\";\nimport AntdIcon from '../components/AntdIcon';\n\nvar ReloadOutlined = function ReloadOutlined(props, ref) {\n  return React.createElement(AntdIcon, Object.assign({}, props, {\n    ref: ref,\n    icon: ReloadOutlinedSvg\n  }));\n};\n\nReloadOutlined.displayName = 'ReloadOutlined';\nexport default React.forwardRef(ReloadOutlined);","import React, { useState, useEffect, useRef, useCallback } from 'react';\r\nimport { Row, Col, Radio } from 'antd';\r\nimport { RadioChangeEvent } from 'antd/lib/radio';\r\n\r\nimport './Monkey.less';\r\nimport { storeConnect, MapState, MapDispatch } from '@/store/index';\r\nimport wordTool, { WordType } from '@/utils/wordTool';\r\nimport TypeResult from '@/components/typeResult/TypeResult';\r\nimport ReloadBtn from '@/components/reloadBtn/ReloadBtn';\r\n\r\ninterface LetterObj {\r\n    letter: string;\r\n    isCorrect: boolean | null;\r\n}\r\ninterface WordObj extends WordType {\r\n    letterArr: LetterObj[];\r\n    isCorrect: boolean | null;\r\n    isSkip: boolean;\r\n}\r\n\r\nconst SPACE_CODE = 32;\r\nconst BACKSPACE_CODE = 8;\r\n\r\nconst getCurrentWordEl = (mEl: any) => Array.from<any>(mEl.children);\r\n\r\nconst Monkey: React.FC<MapState & MapDispatch> = (props) => {\r\n    const inputEl = useRef(null);\r\n    const mainEl = useRef(null);\r\n    const caretElRef = useRef(null);\r\n    const wordsBaseRef = useRef(\r\n        wordTool.getWords(props.$state.root.wordsMode, props.$state.root.customerWords)\r\n    );\r\n    const coordinateRef = useRef([0, 0]);\r\n    const typeResultRef = useRef({\r\n        wpm: '',\r\n        right: 0,\r\n        wrong: 0,\r\n        acc: 0,\r\n        time: { begin: 0, secs: 0 },\r\n    });\r\n\r\n    const [isTyping, setIsTyping] = useState(false);\r\n    const [isCaretFlash, setIsCaretFlash] = useState(false);\r\n    const [isFadingTypeMain, setIsFadingTypeMain] = useState(false);\r\n    const [showTypeResult, setShowTypeResult] = useState(false);\r\n    const [userInput, setUserInput] = useState('');\r\n    const [wordArr, setWordArr] = useState<Array<WordObj>>([]);\r\n    const [caretLocation, setCaretLocation] = useState({ top: 0, left: 0 });\r\n    const [wordCount, setWordCount] = useState(30);\r\n\r\n    const setCaret = () => {\r\n        const coordinate = coordinateRef.current; // 此时坐标为下一个字母的坐标\r\n        const mainElRect = (mainEl.current as any).getBoundingClientRect();\r\n        const currentWordEl = getCurrentWordEl(mainEl.current)[coordinate[0]];\r\n        if (!currentWordEl) return;\r\n        const currentLetterArr = Array.from<any>(currentWordEl.getElementsByClassName('letter'));\r\n        if (currentLetterArr.length <= coordinate[1]) {\r\n            const letterRect = currentLetterArr[coordinate[1] - 1].getBoundingClientRect();\r\n            setCaretLocation({\r\n                top: letterRect.top - mainElRect.top + 2,\r\n                left: letterRect.left - mainElRect.left + letterRect.width,\r\n            });\r\n        } else {\r\n            const letterRect = currentLetterArr[coordinate[1]].getBoundingClientRect();\r\n            setCaretLocation({\r\n                top: letterRect.top - mainElRect.top + 2,\r\n                left: letterRect.left - mainElRect.left,\r\n            });\r\n        }\r\n    };\r\n\r\n    const inputForwardFunc = useCallback(\r\n        (keyCode: number, inputVal: string) => {\r\n            const coordinate = coordinateRef.current;\r\n            const isNewWordInputing =\r\n                userInput === '' || userInput.charAt(userInput.length - 1) === ' ';\r\n            let newCoordinate: number[];\r\n            if (keyCode === SPACE_CODE) {\r\n                if (isNewWordInputing) {\r\n                    newCoordinate = coordinate;\r\n                } else {\r\n                    newCoordinate = [coordinate[0] + 1, 0];\r\n                }\r\n            } else {\r\n                if (coordinate[1] >= wordArr[coordinate[0]].letterArr.length) {\r\n                    // 已经是单词最后一位（下标等于长度），却输入了字母\r\n                    const currentWordEl = getCurrentWordEl(mainEl.current)[coordinate[0]];\r\n                    const codeEl = document.createElement('code');\r\n                    codeEl.className = 'letter wrong extra-letter';\r\n                    codeEl.innerText = inputVal;\r\n                    currentWordEl.appendChild(codeEl);\r\n                }\r\n                newCoordinate = [coordinate[0], coordinate[1] + 1];\r\n            }\r\n            coordinateRef.current = newCoordinate;\r\n            setCaret();\r\n\r\n            setWordArr((_wordArr) => {\r\n                const letterObj = _wordArr[coordinate[0]].letterArr[coordinate[1]];\r\n                if (letterObj && keyCode !== SPACE_CODE) {\r\n                    // console.log(inputVal === letterObj.letter, letterObj);\r\n                    letterObj.isCorrect = inputVal === letterObj.letter;\r\n                    _wordArr[coordinate[0]].letterArr[coordinate[1]] = letterObj;\r\n                }\r\n                if (keyCode === SPACE_CODE && !isNewWordInputing) {\r\n                    // 是否没有输入完单词就空格跳过\r\n                    if (_wordArr[coordinate[0]].letterArr.some((l) => l.isCorrect === null)) {\r\n                        _wordArr[coordinate[0]].isSkip = true;\r\n                        _wordArr[coordinate[0]].isCorrect = false;\r\n                    } else {\r\n                        const currentWordEl = getCurrentWordEl(mainEl.current)[coordinate[0]];\r\n                        const extraLetterArr = currentWordEl.getElementsByClassName('extra-letter');\r\n                        if (!extraLetterArr || extraLetterArr.length === 0) {\r\n                            _wordArr[coordinate[0]].isCorrect = _wordArr[\r\n                                coordinate[0]\r\n                            ].letterArr.every((l) => l.isCorrect);\r\n                        } else {\r\n                            _wordArr[coordinate[0]].isCorrect = false;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                // 是否 (新坐标已超出词组数) || (最后一个词、最后一个字母), 判断显示结果\r\n                if (\r\n                    newCoordinate[0] > _wordArr.length - 1 ||\r\n                    (coordinate[0] === _wordArr.length - 1 &&\r\n                        coordinate[1] === _wordArr[coordinate[0]].letterArr.length - 1)\r\n                ) {\r\n                    _wordArr[coordinate[0]].isCorrect = _wordArr[coordinate[0]].letterArr.every(\r\n                        (l) => l.isCorrect\r\n                    );\r\n                    typeResultRef.current.right = _wordArr.filter((w) => w.isCorrect).length;\r\n                    typeResultRef.current.wrong = _wordArr.length - typeResultRef.current.right;\r\n                    typeResultRef.current.acc = Math.round(\r\n                        (typeResultRef.current.right /\r\n                            (typeResultRef.current.right + typeResultRef.current.wrong)) *\r\n                            100\r\n                    );\r\n                    typeResultRef.current.time.secs = Math.round(\r\n                        (Date.now() - typeResultRef.current.time.begin) / 1000\r\n                    );\r\n                    typeResultRef.current.wpm = (\r\n                        typeResultRef.current.right /\r\n                        (typeResultRef.current.time.secs / 60)\r\n                    ).toFixed(2);\r\n                    setIsTyping(false);\r\n                    setIsFadingTypeMain(true);\r\n                    setTimeout(() => {\r\n                        setShowTypeResult(true);\r\n                    }, 150);\r\n                }\r\n                return _wordArr;\r\n            });\r\n            setUserInput((v) => {\r\n                if (keyCode === SPACE_CODE && (v === '' || v.charAt(v.length - 1) === ' ')) {\r\n                    return v;\r\n                }\r\n                return v + inputVal;\r\n            });\r\n        },\r\n        [userInput, wordArr]\r\n    );\r\n    const backspaceFunc = useCallback(() => {\r\n        const deleteChar = userInput.charAt(userInput.length - 1);\r\n        if (deleteChar === '') {\r\n            return;\r\n        }\r\n        const coordinate = coordinateRef.current;\r\n        let newCoordinate;\r\n        if (deleteChar === ' ') {\r\n            if (wordArr[coordinate[0] - 1].isCorrect) {\r\n                newCoordinate = coordinate;\r\n            } else {\r\n                if (wordArr[coordinate[0] - 1].isSkip) {\r\n                    const lIndex = wordArr[coordinate[0] - 1].letterArr.findIndex(\r\n                        (l) => l.isCorrect === null\r\n                    );\r\n                    newCoordinate = [coordinate[0] - 1, lIndex];\r\n                } else {\r\n                    const currentWordEl = getCurrentWordEl(mainEl.current)[coordinate[0] - 1];\r\n                    const currentLetterArr = currentWordEl.getElementsByClassName('letter');\r\n                    newCoordinate = [coordinate[0] - 1, currentLetterArr.length];\r\n                }\r\n            }\r\n        } else {\r\n            const currentWordEl = getCurrentWordEl(mainEl.current)[coordinate[0]];\r\n            const extraLetterArr = currentWordEl.getElementsByClassName('extra-letter');\r\n            if (extraLetterArr && extraLetterArr.length > 0) {\r\n                currentWordEl.removeChild(extraLetterArr[extraLetterArr.length - 1]);\r\n            }\r\n            newCoordinate = [coordinate[0], coordinate[1] - 1];\r\n        }\r\n        coordinateRef.current = newCoordinate;\r\n        setCaret();\r\n        setWordArr((_wordArr) => {\r\n            if (deleteChar === ' ') {\r\n                if (_wordArr[coordinate[0] - 1].isCorrect === false) {\r\n                    _wordArr[coordinate[0] - 1].isCorrect = null;\r\n                }\r\n            } else if (_wordArr[coordinate[0]].letterArr.length >= coordinate[1]) {\r\n                _wordArr[coordinate[0]].letterArr[coordinate[1] - 1].isCorrect = null;\r\n                _wordArr[coordinate[0]].isCorrect = null;\r\n            }\r\n            return _wordArr;\r\n        });\r\n        setUserInput((v) => {\r\n            let canDelete = true;\r\n            if (deleteChar === ' ') {\r\n                if (wordArr[coordinate[0] - 1].isCorrect) {\r\n                    canDelete = false;\r\n                }\r\n            }\r\n            return canDelete ? v.substring(0, v.length - 1) : v;\r\n        });\r\n    }, [userInput, wordArr]);\r\n\r\n    const inputKeyDown = (evt: React.KeyboardEvent) => {\r\n        // console.log(evt.key, evt.keyCode, evt.metaKey);\r\n        // 9: Tab\r\n        if (evt.keyCode !== 9) {\r\n            evt.preventDefault();\r\n            evt.stopPropagation();\r\n            evt.persist();\r\n        }\r\n        if (showTypeResult) {\r\n            return;\r\n        }\r\n        setIsCaretFlash(false);\r\n        if (evt.key.length === 1) {\r\n            if (typeResultRef.current.time.begin === 0) {\r\n                typeResultRef.current.time.begin = Date.now();\r\n            }\r\n            inputForwardFunc(evt.keyCode, evt.key);\r\n        } else if (evt.keyCode === BACKSPACE_CODE) {\r\n            backspaceFunc();\r\n        }\r\n    };\r\n\r\n    const focusToInput = () => {\r\n        setIsTyping(true);\r\n        (inputEl.current as any).focus();\r\n    };\r\n\r\n    const reloadWord = useCallback(() => {\r\n        coordinateRef.current = [0, 0];\r\n        wordsBaseRef.current = wordTool.shuffle(wordsBaseRef.current);\r\n        typeResultRef.current = {\r\n            wpm: '',\r\n            right: 0,\r\n            wrong: 0,\r\n            acc: 0,\r\n            time: { begin: 0, secs: 0 },\r\n        };\r\n        const extraLetterArr = (mainEl.current as any).getElementsByClassName('extra-letter');\r\n        if (extraLetterArr.length !== 0) {\r\n            Array.from<any>(extraLetterArr).forEach((etl) => {\r\n                etl.parentNode.removeChild(etl);\r\n            });\r\n        }\r\n        setWordArr(\r\n            wordTool.jsonCopy<WordType[]>(wordsBaseRef.current.slice(0, wordCount)).map((word) => {\r\n                return Object.assign({}, word, {\r\n                    letterArr: Array.from(word.text).map((letter) => ({\r\n                        letter,\r\n                        isCorrect: null,\r\n                    })),\r\n                    isCorrect: null,\r\n                    isSkip: false,\r\n                });\r\n            })\r\n        );\r\n        setUserInput('');\r\n        setIsFadingTypeMain(false);\r\n        setShowTypeResult(false);\r\n        setTimeout(() => {\r\n            focusToInput();\r\n            setCaret();\r\n        }, 10);\r\n    }, [wordCount]);\r\n\r\n    useEffect(() => {\r\n        wordsBaseRef.current = wordTool.getWords(\r\n            props.$state.root.wordsMode,\r\n            props.$state.root.customerWords\r\n        );\r\n        reloadWord();\r\n    }, [props.$state.root.wordsMode, props.$state.root.customerWords, reloadWord, wordCount]);\r\n\r\n    return (\r\n        <div className=\"Monkey\">\r\n            <div className=\"word-count-radio\">\r\n                <Radio.Group\r\n                    value={wordCount}\r\n                    size=\"small\"\r\n                    onChange={(e: RadioChangeEvent) => {\r\n                        setWordCount(e.target.value);\r\n                    }}\r\n                >\r\n                    <Radio.Button tabIndex={-1} value={20}>\r\n                        20\r\n                    </Radio.Button>\r\n                    <Radio.Button tabIndex={-1} value={30}>\r\n                        30\r\n                    </Radio.Button>\r\n                    <Radio.Button tabIndex={-1} value={40}>\r\n                        40\r\n                    </Radio.Button>\r\n                    <Radio.Button tabIndex={-1} value={50}>\r\n                        50\r\n                    </Radio.Button>\r\n                </Radio.Group>\r\n            </div>\r\n            <Row justify=\"center\" align=\"middle\">\r\n                <Col\r\n                    flex=\"900px\"\r\n                    className={`type-main-box ${isFadingTypeMain ? 'fading' : ''} ${\r\n                        showTypeResult ? 'hide' : ''\r\n                    }`}\r\n                >\r\n                    <div\r\n                        className={`caret ${isTyping ? (isCaretFlash ? 'flash' : '') : 'hide'}`}\r\n                        ref={caretElRef}\r\n                        style={{\r\n                            transform: `translate3d(${caretLocation.left}px,${caretLocation.top}px,0)`,\r\n                        }}\r\n                    ></div>\r\n                    <div className=\"words-box\" onClick={focusToInput} ref={mainEl}>\r\n                        {wordArr.map((word, wi) => (\r\n                            <div\r\n                                className={`word ${\r\n                                    word.isCorrect\r\n                                        ? 'correct'\r\n                                        : word.isCorrect === false\r\n                                        ? 'wrong'\r\n                                        : ''\r\n                                }`}\r\n                                key={wi}\r\n                            >\r\n                                <div className=\"label\">{word.label}</div>\r\n                                {word.letterArr?.map((letterObj, li) => (\r\n                                    <code\r\n                                        className={`letter ${\r\n                                            letterObj.isCorrect\r\n                                                ? 'correct'\r\n                                                : letterObj.isCorrect === false\r\n                                                ? 'wrong'\r\n                                                : ''\r\n                                        }`}\r\n                                        key={`${wi}_${li}`}\r\n                                    >\r\n                                        {letterObj.letter}\r\n                                    </code>\r\n                                ))}\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                    <input\r\n                        className=\"hidden-input\"\r\n                        type=\"text\"\r\n                        ref={inputEl}\r\n                        onKeyDown={inputKeyDown}\r\n                        onBlur={() => {\r\n                            setIsTyping(false);\r\n                            // setIsCaretFlash(false);\r\n                        }}\r\n                        onFocus={() => {\r\n                            setIsTyping(true);\r\n                            setIsCaretFlash(true);\r\n                        }}\r\n                    />\r\n                    <div className=\"reload-line\">\r\n                        <ReloadBtn onClick={reloadWord} />\r\n                    </div>\r\n                    {/* {userInput} */}\r\n                    <div className={`tip-line ${!isCaretFlash ? 'hide' : ''}`}>\r\n                        <div>点击词块进入输入状态</div>\r\n                        <div>输入正确的拼音字母，然后空格</div>\r\n                        <div>\r\n                            输入状态下<code>Tab</code>后回车可以直接刷新\r\n                        </div>\r\n                        {/* <div>觉得有意思可以打赏一下(#^.^#)(在上面↑↑)</div> */}\r\n                    </div>\r\n                </Col>\r\n                <Col flex=\"900px\" className={`type-result-box ${showTypeResult ? 'show' : ''}`}>\r\n                    {/* {JSON.stringify(typeResultRef.current)} */}\r\n                    <TypeResult\r\n                        desc=\"WPM\"\r\n                        numStr={typeResultRef.current.wpm}\r\n                        acc={typeResultRef.current.acc}\r\n                        secs={typeResultRef.current.time.secs}\r\n                    />\r\n                    <div className=\"reload-line\">\r\n                        <ReloadBtn onClick={reloadWord} />\r\n                    </div>\r\n                </Col>\r\n            </Row>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default storeConnect(Monkey);\r\n"],"sourceRoot":""}