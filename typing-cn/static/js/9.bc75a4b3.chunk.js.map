{"version":3,"sources":["components/keyboard/Keyboard.tsx","views/training/Training.tsx"],"names":["layoutRenderConfig","map","row","newRow","forEach","colOrSet","index","temp","w","t","prevCol","push","Keyboard","props","delayFinish","pureKey","setTimeout","finishAnimate","getColClass","key","classStr","split","pop","highlightKeys","has","correctedKey","wrongKey","blurKeys","className","ri","justify","col","ci","style","width","dangerouslySetInnerHTML","__html","replace","LEFT","LEFT_NUM","RIGHT","RIGHT_NUM","MARK","character","pool","excludeChar","pools","leftNum","join","left","rightNum","right","charAll","num","min","max","poolSet","charAt","length","Math","round","random","Training","useState","setKey","keyDesc","setKeyDesc","inputEl","useRef","mode","setMode","Set","highKey","setHighKey","setCorrectedKey","setWrongKey","setBlurKeys","correctCount","setCorrectCount","wrongCount","setWrongCount","useEffect","toLocaleUpperCase","blurKeysTemp","concat","current","focus","Group","onChange","e","target","value","defaultValue","Button","ref","onKeyDown","evt","fitKey","toUpperCase","currentKey","Array","from","n","persist","preventDefault","stopPropagation","onKeyUp","console","log","keyCode","metaKey"],"mappings":"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","file":"static/js/9.bc75a4b3.chunk.js","sourcesContent":["/*\n * @Author: zhaoxuanzi\n * @Date: 2021-02-19 17:21:14\n * @LastEditors: zhaoxuanzi\n * @LastEditTime: 2021-03-12 18:50:01\n */\nimport React from 'react';\nimport { Row, Col } from 'antd';\n\nimport './Keyboard.less';\nimport layout from './layout.json';\n\ninterface Props {\n    highlightKeys: Set<string>;\n    correctedKey?: string;\n    wrongKey?: string;\n    finishAnimate?: (key: string) => void;\n    blurKeys?: Set<string>;\n}\n\nconst layoutRenderConfig = layout.map((row) => {\n    const newRow: { w: number; t: string }[] = [];\n    row.forEach((colOrSet, index) => {\n        if (typeof colOrSet === 'string') {\n            let temp = { w: 1, t: colOrSet };\n\n            // 检查json关于键的配置\n            const prevCol = row[index - 1];\n            if (index > 0 && typeof prevCol === 'object') {\n                temp = { w: prevCol.w, t: colOrSet };\n            }\n            newRow.push(temp);\n        }\n    });\n    return newRow;\n});\n\nconst Keyboard: React.FC<Props> = (props) => {\n    const delayFinish = (pureKey: string) => {\n        setTimeout(() => {\n            props.finishAnimate && props.finishAnimate(pureKey);\n        }, 250);\n    };\n    const getColClass = (key: string) => {\n        let classStr = 'key-item';\n        if (key === '') {\n            classStr += ' placeholder';\n        } else {\n            const pureKey = key.split('\\n').pop() || '';\n            if (props.highlightKeys.has(pureKey)) {\n                classStr += ' high-light';\n            }\n            if (props.correctedKey && props.correctedKey === pureKey) {\n                classStr += ' keyCorrect';\n                delayFinish(pureKey);\n            }\n            if (props.wrongKey && props.wrongKey === pureKey) {\n                classStr += ' headShake';\n                delayFinish(pureKey);\n            }\n            if (props.blurKeys && props.blurKeys.has(pureKey)) {\n                classStr += ' blur';\n            }\n        }\n        return classStr;\n    };\n    return (\n        <div className=\"Keyboard\">\n            {layoutRenderConfig.map((row, ri) => (\n                <Row key={ri} justify=\"space-between\">\n                    {row.map((col, ci) => (\n                        <Col\n                            className={getColClass(col.t)}\n                            key={ci}\n                            style={{ width: `${60 * col.w}px` }}\n                            dangerouslySetInnerHTML={{ __html: col.t.replace('\\n', '<br>') }}\n                        >\n                            {/* {col.t.replace('\\n', '<br>')} */}\n                        </Col>\n                    ))}\n                </Row>\n            ))}\n        </div>\n    );\n};\n\nexport default Keyboard;\n","/*\n * @Author: zhaoxuanzi\n * @Date: 2021-02-19 17:58:40\n * @LastEditors: zhaoxuanzi\n * @LastEditTime: 2021-03-15 20:53:33\n */\nimport { Input, Radio } from 'antd';\nimport React, { useState, useEffect, useRef } from 'react';\n\nimport Keyboard from '@/components/keyboard/Keyboard';\nimport './Training.less';\n\nconst LEFT = ['Q', 'W', 'E', 'R', 'T', 'A', 'S', 'D', 'F', 'G', 'Z', 'X', 'C', 'V', 'B'];\nconst LEFT_NUM = ['1', '2', '3', '4', '5', '6'];\nconst RIGHT = ['Y', 'U', 'I', 'O', 'P', 'H', 'J', 'K', 'L', 'N', 'M'];\nconst RIGHT_NUM = ['7', '8', '9', '0'];\nconst MARK = ['-', '=', '[', ']', ';', \"'\", ',', '.', '/'];\n\nconst natural = (min?: number, max?: number) => {\n    min = typeof min !== 'undefined' ? min : 0;\n    max = typeof max !== 'undefined' ? max : 9007199254740992; // 2^53\n    return Math.round(Math.random() * (max - min)) + min;\n};\nconst character = (pool: 'left' | 'right' | 'charAll' | 'num', excludeChar?: string) => {\n    const pools = {\n        leftNum: LEFT_NUM.join(''),\n        left: LEFT.join(''),\n        rightNum: RIGHT_NUM.join(''),\n        right: RIGHT.join(''),\n        charAll: '',\n        num: '',\n    };\n    pools.charAll = pools.left + pools.right;\n    pools.num = pools.leftNum + pools.rightNum;\n\n    const poolSet = (pools[pool] || pools.charAll).replace(excludeChar || '', '');\n    return poolSet.charAt(natural(0, poolSet.length - 1));\n};\n\nconst Training: React.FC = () => {\n    const [key, setKey] = useState('');\n    const [keyDesc, setKeyDesc] = useState('');\n    const inputEl = useRef(null);\n\n    const [mode, setMode] = useState<'left' | 'right' | 'charAll' | 'num'>('charAll');\n    // const [pressKeys, setPressKeys] = useState<Set<string>>(new Set([]));\n    const [highKey, setHighKey] = useState<Set<string>>(new Set([]));\n    const [correctedKey, setCorrectedKey] = useState<string>();\n    const [wrongKey, setWrongKey] = useState<string>();\n    const [blurKeys, setBlurKeys] = useState<Set<string>>(new Set([]));\n\n    const [correctCount, setCorrectCount] = useState(0);\n    const [wrongCount, setWrongCount] = useState(0);\n\n    const mainInputKeyDown = (evt: React.KeyboardEvent) => {\n        setKey(evt.key);\n        const fitKey = evt.key.length === 1 ? evt.key.toUpperCase() : evt.key;\n        // setPressKeys((_keys) => {\n        //     const temp = new Set(_keys);\n        //     temp.add(fitKey);\n        //     return temp;\n        // });\n        const currentKey = Array.from(highKey)[0];\n        if (fitKey === currentKey) {\n            setCorrectedKey(currentKey);\n            setCorrectCount((n) => n + 1);\n            setHighKey(new Set([character(mode, currentKey)]));\n        } else {\n            setWrongKey(currentKey);\n            setWrongCount((n) => n + 1);\n        }\n        evt.persist();\n        evt.preventDefault();\n        evt.stopPropagation();\n    };\n\n    const inputKeyUp = (evt: React.KeyboardEvent) => {\n        console.log(evt.key, evt.keyCode, evt.metaKey);\n        // setPressKeys((_keys) => {\n        //     const temp = new Set(_keys);\n        //     temp.delete(evt.key.length === 1 ? evt.key.toUpperCase() : evt.key);\n        //     return temp;\n        // });\n        evt.persist();\n    };\n\n    const removeKey = (key: string) => {\n        setCorrectedKey('');\n        setWrongKey('');\n    };\n\n    useEffect(() => {\n        if (key === '') {\n            setKeyDesc('');\n        } else if (key === ' ') {\n            setKeyDesc('Space');\n        } else if (key.length === 1) {\n            setKeyDesc(key.toLocaleUpperCase());\n        } else {\n            setKeyDesc(key);\n        }\n    }, [key]);\n\n    useEffect(() => {\n        const blurKeysTemp: string[] = [...MARK];\n        if (mode === 'charAll') {\n            setBlurKeys(new Set(blurKeysTemp.concat(LEFT_NUM, RIGHT_NUM)));\n        } else if (mode === 'left') {\n            setBlurKeys(new Set(blurKeysTemp.concat(RIGHT, LEFT_NUM, RIGHT_NUM)));\n        } else if (mode === 'right') {\n            setBlurKeys(new Set(blurKeysTemp.concat(LEFT, LEFT_NUM, RIGHT_NUM)));\n        } else if (mode === 'num') {\n            setBlurKeys(new Set(blurKeysTemp.concat(LEFT, RIGHT)));\n        }\n\n        setHighKey(new Set([character(mode)]));\n\n        setCorrectCount(0);\n        setWrongCount(0);\n        (inputEl.current as any).focus();\n    }, [mode]);\n\n    return (\n        <div className=\"Training\">\n            <div className=\"Training-mode\">\n                <Radio.Group onChange={(e) => setMode(e.target.value)} defaultValue={mode}>\n                    <Radio.Button value=\"left\">左手模式</Radio.Button>\n                    <Radio.Button value=\"charAll\">全部</Radio.Button>\n                    <Radio.Button value=\"right\">右手模式</Radio.Button>\n                    <Radio.Button value=\"num\">数字模式</Radio.Button>\n                </Radio.Group>\n            </div>\n            <Keyboard\n                highlightKeys={highKey}\n                correctedKey={correctedKey}\n                wrongKey={wrongKey}\n                finishAnimate={removeKey}\n                blurKeys={blurKeys}\n            />\n            <div className=\"Training__input\">\n                <Input ref={inputEl} onKeyDown={mainInputKeyDown} onKeyUp={inputKeyUp} />\n            </div>\n            <div className=\"Training__desc\">\n                <div>{keyDesc}</div>\n            </div>\n            <div className=\"Training-count\">\n                <div className=\"correct\">{correctCount}</div>\n                <div className=\"wrong\">{wrongCount}</div>\n            </div>\n        </div>\n    );\n};\n\nexport default Training;\n"],"sourceRoot":""}