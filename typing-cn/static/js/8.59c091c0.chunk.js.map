{"version":3,"sources":["utils/wordTool.ts","views/fingers/Fingers.tsx"],"names":["wordTool","shuffle","arr","i","length","rIndex","Math","floor","random","temp","getWords","mode","propWords","jsonCopy","WORDS","obj","JSON","parse","stringify","Countdown","Statistic","Panel","Collapse","getCountdownStr","value","minutes","secs","storeConnect","props","useState","loading","setLoading","deadline","setDeadline","actingWordIndex","setActingWordIndex","wordArr","setWordArr","wordInput","setWordInput","typingEnd","setTypingEnd","wordsBaseRef","useRef","$state","root","wordsMode","customerWords","mainWindowEl","mainInputEl","wordIndexRef","lineIndexLockRef","nextLineStartIndexRef","lineCountRef","timeStartRef","oneLineHeightRef","keystrokeCountRef","countdownTimeRef","parseInt","countdownTime","current","deadlineText","setDeadlineText","isHideCharacter","setIsHideCharacter","typingResultRef","wpm","correct","wrong","inputWordArr","pushWordToArr","isInit","wordsTemp","isCorrect","concat","checkInputVal","inputArr","target","forEach","char","index","charAt","reloadBtn","useCallback","setTimeout","focus","useEffect","wordContainerRow","lastElementChild","outterScrollTop","scrollTop","Array","from","children","child","offsetHeight","childTopToParent","offsetTop","showsSecLine","isNextLineCheck","time","Date","now","countDownStart","trim","tempArr","targetWord","text","push","Object","assign","input","join","className","justify","align","flex","uiScale","tabIndex","type","onClick","v","spinning","delay","wrapperClassName","ref","gutter","map","item","key","label","onChange","evt","onKeyUp","keyCode","content","defaultValue","test","String","Number","onVisibleChange","$dispatch","overlayClassName","placement","title","trigger","format","onFinish","correctCount","filter","word","round","console","log","icon","span","ghost","header","w","wi","color"],"mappings":"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","file":"static/js/8.59c091c0.chunk.js","sourcesContent":["import WORDS, { Word } from '@/words';\r\n\r\nconst wordTool = {\r\n    shuffle(arr: any[]) {\r\n        for (let i = arr.length - 1; i >= 0; i--) {\r\n            let rIndex = Math.floor(Math.random() * (i + 1));\r\n            let temp = arr[rIndex];\r\n            arr[rIndex] = arr[i];\r\n            arr[i] = temp;\r\n        }\r\n        return arr;\r\n    },\r\n    getWords(mode: string, propWords: Word[]) {\r\n        if (mode !== '1' && propWords && propWords.length !== 0) {\r\n            return wordTool.jsonCopy<Word[]>(propWords);\r\n        } else {\r\n            return wordTool.jsonCopy<Word[]>(WORDS);\r\n        }\r\n    },\r\n    jsonCopy<T>(obj: object) {\r\n        return JSON.parse(JSON.stringify(obj)) as T;\r\n    },\r\n};\r\n\r\nexport type WordType = Word;\r\nexport default wordTool;\r\n","import React, { useState, useEffect, useRef, useCallback } from 'react';\r\nimport {\r\n    Input,\r\n    Row,\r\n    Col,\r\n    Statistic,\r\n    Button,\r\n    Spin,\r\n    Popover,\r\n    InputNumber,\r\n    Collapse,\r\n    Tag,\r\n} from 'antd';\r\nimport { ReloadOutlined } from '@ant-design/icons';\r\n\r\nimport './Fingers.less';\r\nimport { storeConnect, MapState, MapDispatch } from '@/store/index';\r\nimport wordTool, { WordType } from '@/utils/wordTool';\r\n\r\nconst { Countdown } = Statistic;\r\nconst { Panel } = Collapse;\r\n\r\nconst getCountdownStr = (value: number) => {\r\n    const minutes = Math.floor(value / 60);\r\n    const secs = value % 60;\r\n    return `${minutes}:${secs < 10 ? '0' : ''}${secs}`;\r\n};\r\n\r\nconst Fingers: React.FC<MapState & MapDispatch> = (props) => {\r\n    const [loading, setLoading] = useState(true);\r\n    const [deadline, setDeadline] = useState(0);\r\n    const [actingWordIndex, setActingWordIndex] = useState(0);\r\n    const [wordArr, setWordArr] = useState<Array<WordType & { isCorrect: boolean | null }>>([]);\r\n    const [wordInput, setWordInput] = useState('');\r\n    const [typingEnd, setTypingEnd] = useState(false);\r\n    const wordsBaseRef = useRef(\r\n        wordTool.getWords(props.$state.root.wordsMode, props.$state.root.customerWords)\r\n    );\r\n    const mainWindowEl = useRef(null);\r\n    const mainInputEl = useRef(null);\r\n    const wordIndexRef = useRef(0); // WORDS数组的下标\r\n    const lineIndexLockRef = useRef(false); // 是否设置过第二行开头元素的下标\r\n    const nextLineStartIndexRef = useRef(0);\r\n    const lineCountRef = useRef(0);\r\n    const timeStartRef = useRef(false);\r\n    const oneLineHeightRef = useRef(53);\r\n    const keystrokeCountRef = useRef(0);\r\n    const countdownTimeRef = useRef(parseInt(props.$state.root.countdownTime, 10));\r\n    const [deadlineText, setDeadlineText] = useState(getCountdownStr(countdownTimeRef.current));\r\n    const [isHideCharacter, setIsHideCharacter] = useState(false);\r\n    const typingResultRef = useRef({\r\n        wpm: 0,\r\n        correct: 0,\r\n        wrong: 0,\r\n        inputWordArr: [] as any[],\r\n    });\r\n\r\n    const countDownStart = () => {\r\n        const time = countdownTimeRef.current;\r\n        setDeadline(Date.now() + time * 1000);\r\n    };\r\n    const pushWordToArr = (isInit?: boolean) => {\r\n        setWordArr((arr) => {\r\n            const wordsTemp = [...wordsBaseRef.current];\r\n            if (isInit) {\r\n                wordIndexRef.current = 0;\r\n                return [{ isCorrect: null, ...wordsTemp[wordIndexRef.current] }];\r\n            } else {\r\n                wordIndexRef.current += 1;\r\n                if (wordIndexRef.current >= wordsTemp.length) wordIndexRef.current = 0;\r\n                return arr.concat({ isCorrect: null, ...wordsTemp[wordIndexRef.current] });\r\n            }\r\n        });\r\n    };\r\n    const checkInputVal = (inputArr: string[], target: string) => {\r\n        let isCorrect = true;\r\n        inputArr.forEach((char, index) => {\r\n            if (target.charAt(index) !== char) {\r\n                isCorrect = false;\r\n            }\r\n        });\r\n        return isCorrect;\r\n    };\r\n    const inputCountdownTime = (value?: number | string) => {\r\n        if (value && /^\\d+$/g.test(String(value))) {\r\n            countdownTimeRef.current = Number(value);\r\n            setDeadlineText(getCountdownStr(Number(value)));\r\n        }\r\n    };\r\n    const onCountdownFinish = () => {\r\n        if (timeStartRef.current) {\r\n            const inputWordArr = typingResultRef.current.inputWordArr;\r\n            const correctCount = inputWordArr.filter((word: any) => word.isCorrect === true).length;\r\n            typingResultRef.current = {\r\n                wpm: Math.round(correctCount / (countdownTimeRef.current / 60)),\r\n                correct: correctCount,\r\n                wrong: inputWordArr.filter((word: any) => word.isCorrect === false).length,\r\n                inputWordArr,\r\n            };\r\n            setTypingEnd(true);\r\n            console.log(wordArr);\r\n        }\r\n    };\r\n    const reloadBtn = useCallback(() => {\r\n        lineIndexLockRef.current = false;\r\n        lineCountRef.current = 0;\r\n        timeStartRef.current = false;\r\n        keystrokeCountRef.current = 0;\r\n        setTypingEnd(false);\r\n        setWordInput('');\r\n        setActingWordIndex(0);\r\n        wordsBaseRef.current = wordTool.shuffle(wordsBaseRef.current);\r\n        pushWordToArr(true);\r\n        setTimeout(() => {\r\n            (mainInputEl.current as any).focus();\r\n            typingResultRef.current = {\r\n                wpm: 0,\r\n                correct: 0,\r\n                wrong: 0,\r\n                inputWordArr: [] as any[],\r\n            };\r\n        }, 10);\r\n    }, []);\r\n    const mainInputKeyUp = (evt: React.KeyboardEvent) => {\r\n        if (evt.keyCode === 13) reloadBtn();\r\n        if (typingEnd) return;\r\n        keystrokeCountRef.current += 1;\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (mainWindowEl) {\r\n            const wordContainerRow = (mainWindowEl.current as any).lastElementChild;\r\n            if (!wordContainerRow || !wordContainerRow.lastElementChild) return;\r\n            const outterScrollTop = (mainWindowEl.current as any).scrollTop;\r\n            Array.from(wordContainerRow.children).forEach((child: any, index: number) => {\r\n                oneLineHeightRef.current = child.offsetHeight;\r\n                const childTopToParent = child.offsetTop - wordContainerRow.offsetTop;\r\n                const showsSecLine = oneLineHeightRef.current + outterScrollTop;\r\n                const isNextLineCheck = // 判断是不是显示的两行中的第二行，存在小数公差\r\n                    showsSecLine - 5 < childTopToParent && childTopToParent < showsSecLine + 5;\r\n                if (!lineIndexLockRef.current && isNextLineCheck) {\r\n                    nextLineStartIndexRef.current = index;\r\n                    lineIndexLockRef.current = true;\r\n                }\r\n            });\r\n            if (\r\n                wordContainerRow.lastElementChild.offsetTop -\r\n                    wordContainerRow.offsetTop -\r\n                    outterScrollTop <\r\n                oneLineHeightRef.current * 3 + 1\r\n            ) {\r\n                pushWordToArr();\r\n            }\r\n        }\r\n    }, [wordArr.length]);\r\n\r\n    useEffect(() => {\r\n        if (typingEnd) return;\r\n        if (wordInput === '') {\r\n            setWordArr((arr) => {\r\n                const tempArr = [...arr];\r\n                if (tempArr[actingWordIndex]) {\r\n                    tempArr[actingWordIndex].isCorrect = null;\r\n                }\r\n                return tempArr;\r\n            });\r\n            return;\r\n        }\r\n        if (!timeStartRef.current) countDownStart();\r\n        timeStartRef.current = true;\r\n        const inputArr = Array.from(wordInput.trim());\r\n        if (wordInput[wordInput.length - 1] === ' ') {\r\n            setWordInput('');\r\n            if (inputArr.length === 0) return;\r\n            setWordArr((arr) => {\r\n                let tempArr = [...arr];\r\n                const targetWord = tempArr[actingWordIndex];\r\n                const isCorrect = checkInputVal(inputArr, targetWord.text);\r\n                tempArr[actingWordIndex].isCorrect =\r\n                    isCorrect && inputArr.length === targetWord.text.length;\r\n\r\n                typingResultRef.current.inputWordArr.push(\r\n                    Object.assign({ input: inputArr.join('') }, tempArr[actingWordIndex])\r\n                );\r\n                return tempArr;\r\n            });\r\n            setActingWordIndex(actingWordIndex + 1);\r\n            if (actingWordIndex + 1 === nextLineStartIndexRef.current) {\r\n                lineCountRef.current += 1;\r\n                (mainWindowEl.current as any).scrollTop =\r\n                    oneLineHeightRef.current * lineCountRef.current;\r\n                lineIndexLockRef.current = false;\r\n                pushWordToArr();\r\n            }\r\n        } else {\r\n            setWordArr((arr) => {\r\n                const tempArr = [...arr];\r\n                const targetWord = tempArr[actingWordIndex];\r\n                const isCorrect = checkInputVal(inputArr, targetWord.text);\r\n                tempArr[actingWordIndex].isCorrect = isCorrect === false ? false : null;\r\n                return tempArr;\r\n            });\r\n        }\r\n    }, [actingWordIndex, typingEnd, wordInput]);\r\n\r\n    useEffect(() => {\r\n        wordsBaseRef.current = wordTool.getWords(\r\n            props.$state.root.wordsMode,\r\n            props.$state.root.customerWords\r\n        );\r\n        setTimeout(() => {\r\n            reloadBtn();\r\n            setLoading(false);\r\n        }, 1000);\r\n    }, [props.$state.root.wordsMode, props.$state.root.customerWords, reloadBtn]);\r\n\r\n    return (\r\n        <div className=\"home\">\r\n            <Row justify=\"center\" align=\"middle\">\r\n                <Col flex=\"450px\" className={`home-scale-box-${props.$state.root.uiScale}`}>\r\n                    <div className=\"hide-control\">\r\n                        <Button\r\n                            tabIndex={-1}\r\n                            type=\"link\"\r\n                            onClick={() => setIsHideCharacter((v) => !v)}\r\n                        >\r\n                            {isHideCharacter ? '显示' : '隐藏'}拼音\r\n                        </Button>\r\n                    </div>\r\n                    <div className=\"home-show-main\">\r\n                        {typingEnd && <div className=\"type-end\"></div>}\r\n                        <Spin spinning={loading} delay={50} wrapperClassName=\"loading-wrapper\">\r\n                            <div className=\"home-show-main-window\" ref={mainWindowEl}>\r\n                                <Row gutter={12}>\r\n                                    {wordArr.map((item, index) => (\r\n                                        <Col\r\n                                            key={index}\r\n                                            className={`home-show-main-window-item ${\r\n                                                item.isCorrect === true ? 'correct' : ''\r\n                                            } ${item.isCorrect === false ? 'incorrect' : ''}`}\r\n                                        >\r\n                                            <div\r\n                                                className={`home-show-main-window--label ${\r\n                                                    actingWordIndex === index ? 'acting' : ''\r\n                                                }`}\r\n                                            >\r\n                                                {item.label}\r\n                                            </div>\r\n                                            <div\r\n                                                className={`home-show-main-window--text ${\r\n                                                    isHideCharacter ? 'hide' : ''\r\n                                                }`}\r\n                                            >\r\n                                                {item.text}\r\n                                            </div>\r\n                                        </Col>\r\n                                    ))}\r\n                                </Row>\r\n                            </div>\r\n                        </Spin>\r\n                    </div>\r\n                    <Row justify=\"space-between\" align=\"middle\" gutter={0}>\r\n                        <Col flex=\"285px\">\r\n                            <Input\r\n                                className=\"home-input\"\r\n                                ref={mainInputEl}\r\n                                value={wordInput}\r\n                                onChange={(evt) => {\r\n                                    setWordInput(evt.target.value);\r\n                                }}\r\n                                onKeyUp={mainInputKeyUp}\r\n                            ></Input>\r\n                        </Col>\r\n                        <Col flex=\"90px\">\r\n                            <Popover\r\n                                content={\r\n                                    <div>\r\n                                        <InputNumber\r\n                                            defaultValue={countdownTimeRef.current}\r\n                                            onChange={inputCountdownTime}\r\n                                        ></InputNumber>\r\n                                        <span>秒</span>\r\n                                    </div>\r\n                                }\r\n                                onVisibleChange={() =>\r\n                                    props.$dispatch(\r\n                                        'setCountdownTime',\r\n                                        String(countdownTimeRef.current)\r\n                                    )\r\n                                }\r\n                                overlayClassName=\"home-countdown-popover\"\r\n                                placement=\"bottom\"\r\n                                title=\"\"\r\n                                trigger=\"click\"\r\n                            >\r\n                                <div className=\"home-countdown\">\r\n                                    <Countdown\r\n                                        className=\"home-countdown-main\"\r\n                                        value={deadline}\r\n                                        format=\"m:ss\"\r\n                                        onFinish={onCountdownFinish}\r\n                                    ></Countdown>\r\n                                    <div\r\n                                        className={`home-countdown-placeholder ${\r\n                                            timeStartRef.current ? 'time-run' : ''\r\n                                        }`}\r\n                                    >\r\n                                        {deadlineText}\r\n                                    </div>\r\n                                </div>\r\n                            </Popover>\r\n                        </Col>\r\n                        <Col flex=\"50px\">\r\n                            <Button\r\n                                className=\"home-reload-btn\"\r\n                                onClick={reloadBtn}\r\n                                type=\"primary\"\r\n                                icon={<ReloadOutlined />}\r\n                            />\r\n                        </Col>\r\n                    </Row>\r\n                    <div className=\"home-type-result-container\">\r\n                        {typingEnd && (\r\n                            <Row className=\"home-type-result\">\r\n                                <Col span={24}>\r\n                                    <div className=\"result-wpm\">\r\n                                        {typingResultRef.current.wpm}\r\n                                        WPM\r\n                                    </div>\r\n                                </Col>\r\n                                <Col span={12}>\r\n                                    <div className=\"result-title\">正确</div>\r\n                                </Col>\r\n                                <Col span={12}>\r\n                                    <div className=\"result-numbers correct\">\r\n                                        {typingResultRef.current.correct}\r\n                                    </div>\r\n                                </Col>\r\n                                <Col span={12}>\r\n                                    <div className=\"result-title\">错误</div>\r\n                                </Col>\r\n                                <Col span={12}>\r\n                                    <div className=\"result-numbers wrong\">\r\n                                        {typingResultRef.current.wrong}\r\n                                    </div>\r\n                                </Col>\r\n                                <Col span={12}>\r\n                                    <div className=\"result-title\">按键总数</div>\r\n                                </Col>\r\n                                <Col span={12}>\r\n                                    <div className=\"result-numbers\">\r\n                                        {keystrokeCountRef.current}\r\n                                    </div>\r\n                                </Col>\r\n                                <Col span={24}>\r\n                                    <Collapse ghost={true} className=\"type-resule-collapse\">\r\n                                        <Panel header=\"展开此次输入\" key=\"1\">\r\n                                            {typingResultRef.current.inputWordArr.map((w, wi) => (\r\n                                                <Tag\r\n                                                    color={w.isCorrect ? 'success' : 'error'}\r\n                                                    key={wi}\r\n                                                >\r\n                                                    <div>{w.label}</div>\r\n                                                    <div>{w.input}</div>\r\n                                                </Tag>\r\n                                            ))}\r\n                                        </Panel>\r\n                                    </Collapse>\r\n                                </Col>\r\n                            </Row>\r\n                        )}\r\n                    </div>\r\n                </Col>\r\n            </Row>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default storeConnect(Fingers);\r\n"],"sourceRoot":""}